service: products-service
useDotenv: true
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  profile: serverlessUser
  region: eu-west-1
  iam:
    role:
      statements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource:
        - ${env:DB_ARN}
      - Effect: Allow
        Action: 
          - sqs:sendmessage
        Resource:
        - arn:aws:sqs:eu-west-1:730335492388:catalogItemsQueue
  environment:
    PRODUCTS_TABLE: ${env:PRODUCTS_TABLE}
    STOCKS_TABLE: ${env:STOCKS_TABLE}
    SNS_TOPIC_ARN:
      Ref: createProductTopic

functions:
  getProductsList:
    handler: handler.getProductsList
    events:
      - httpApi:
          path: /products
          method: get

  getProductById:
    handler: handler.getProductById
    events:
      - httpApi:
          path: /products/{productId}
          method: get

  createProduct:
    handler: handler.createProduct
    events:
      - httpApi:
          path: /products
          method: post

  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs: 
          arn:
            Fn::GetAtt:  [CatalogItemsQueue, Arn]
          batchSize: 5
    role: CatalogBatchItemsRole      
   

resources:
  Resources:
    CatalogItemsQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: catalogItemsQueue
    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic

    ProductEmailSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        Endpoint: zelenbaba.andja@gmail.com
        TopicArn:
          Ref: createProductTopic
    CatalogBatchItemsRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: CatalogBatchItemsRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: SQSAccessPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Sid: PublishSNSMessage
                  Effect: Allow
                  Action: sns:Publish
                  Resource:
                    Ref: createProductTopic
                - Sid: ReceiveDeleteMessages
                  Effect: Allow
                  Action: 
                    - sqs:ReceiveMessage
                    - sqs:DeleteMessage
                    - sqs:GetQueueAttributes
                  Resource:
                    Fn::GetAtt: [CatalogItemsQueue, Arn]
                
